<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.docker.developer.maven.plugin.demo</groupId>
    <artifactId>docker-developer-maven-plugin-demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>docker-developer-maven-plugin-demo</name>
    <description>docker开发者插件的demo例子</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>com.docker.plugin</groupId>
                <artifactId>docker-developer-maven-plugin</artifactId>
                <version>1.0.0-SNAPSHOT</version>
                <configuration>
                    <!-- 本地package以后生成的jar包的完整路径 -->
                    <jarTargetPath>${basedir}/target/${artifactId}-${version}.jar</jarTargetPath>
                    <!-- centos服务器存放我们的dockerFile文件和相应的jar包的文件夹的路径 -->
                    <dockerImagesPath>/home/app/docker/test/</dockerImagesPath>
                    <!-- 创建镜像的dockerFile的文件的路径 -->
                    <dockerFilePath>${basedir}/dockerFile/Dockerfile</dockerFilePath>
                    <!-- 生成的jar包上传到linux服务器以后需要重命名的名称，此处的名称与dockerFile文件夹中的ADD docker-plugin-test.jar /home/app/app.jar的名称一致 -->
                    <jarRename>docker-developer-plugin-test.jar</jarRename>
                    <!-- 镜像的简称名称，主要用于删除所有属于此镜像的版本的镜像 -->
                    <imagesHeadName>docker-developer-plugin-test</imagesHeadName>
                    <!-- 启动的容器的名字 -->
                    <containerRunName>docker-developer-plugin-test-run</containerRunName>
                    <!-- 该工程启动的时候的文件挂载 -->
                    <containerRunShare>/home/app/logs/docker-developer-plugin-test/log/:/app/www/logs/docker-developer-plugin-test/log/</containerRunShare>
                    <!-- 该工程启动的时候的端口映射,多个端口那就对应着启动多少个容器 -->
                    <containerRunPorts>
                        <containerRunPort>8090:8090</containerRunPort>
                        <containerRunPort>8091:8090</containerRunPort>
                    </containerRunPorts>
                    <options>
                        <!-- 服务器的ip,账号,密码 -->
                        <option>
                            10.10.10.114,root,1qaz2wsx
                        </option>
                    </options>
                </configuration>
                <executions>
                    <execution>
                        <!-- 设置该插件的执行的生命周期为package完成以后执行,若不想绑定就将executions这块的代码注释了，后面就不会在打包好以后再去执行docker插件的操作 -->
                        <phase>package</phase>
                        <goals>
                            <!--phase与goal是绑定的关系，当g到达了phase阶段的时候就会去执行goal，此处的值固定为dockerMavenPlugin，因为插件给予他的名字就是dockerMavenPlugin -->
                            <goal>dockerMavenPlugin</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
